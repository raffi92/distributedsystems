package announcer;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;

/**
 * Server for announcing the IP Address.s
 */
public class ServiceAnnouncer {

	private DatagramSocket socket;
	private final byte[] serviceName = "Test".getBytes();
	private int port;
	private final byte[] buffer = new byte[9];
	
	/**
	 * 
	 * @param port Integer with a port number.
	 */
	public ServiceAnnouncer(final int port) {
		this.port = port;
	}

	
	
	/**
	 * Server listening for package.
	 */
	public void start() {
		System.out.println("Server is started!");
		try {
			
			// Opens the UDP port, throws SocketException if it is already in use or it is not able to open.
			socket = new DatagramSocket(port);
		
			// Handles a multiple number of requests.
			 while (true) {
				
				// Waiting for a package from client/clients. 
				final DatagramPacket packet = new DatagramPacket(buffer, buffer.length);

				// Receives the packet of the datagram socket.
				socket.receive(packet);
				
				 // Read the received data.
				final String data = new String(packet.getData()).trim();
				
				
				
				// Answer only if the message contains WHO.
				if (data.equalsIgnoreCase("WHO")) {
					System.out.println("WHO-Request sent from client : "
							+ packet.getAddress().getHostAddress() + ":"
							+ packet.getPort());

					// Send a response to the ServiceLocator.
					final DatagramPacket responseAddress = new DatagramPacket(
							InetAddress.getLocalHost().getAddress(),
							InetAddress.getLocalHost().getAddress().length,
							packet.getAddress(), packet.getPort());
					socket.send(responseAddress);	
				}
				// Answer only if the message contains GSN.
				if (data.equalsIgnoreCase("GSN")) {
					System.out.println("GSN-Request sent from client : "
							+ packet.getAddress().getHostAddress() + ":"
							+ packet.getPort());
					
					final DatagramPacket responseServiceName = new DatagramPacket(
						serviceName,
						serviceName.length,
						packet.getAddress(), packet.getPort());
					socket.send(responseServiceName);
				} else {
					System.out.println("Invalid message: " + data);
				}
				

			}
		} catch (final SocketException e) {
			System.out.println("Port is already in use!");
			e.printStackTrace();
		} catch (final IOException e) {
			System.out.println("Communication error!");
			e.printStackTrace();
		} finally {
			socket.close();
		}
	}

	
	
	/**
	 * Main method to start the server.
	 * 
	 * @param args Not used.
	 */
	public static void main(final String[] args) {
		final ServiceAnnouncer server = new ServiceAnnouncer(12355);
		server.start();
	}
}