// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package dispatcherEx02;

public final class DispatcherImpl_Stub
    extends java.rmi.server.RemoteStub
    implements interfaces.Dispatcher, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_close_0;
    private static java.lang.reflect.Method $method_randomServer_1;
    private static java.lang.reflect.Method $method_register_2;
    private static java.lang.reflect.Method $method_submit_3;
    
    static {
	try {
	    $method_close_0 = interfaces.Dispatcher.class.getMethod("close", new java.lang.Class[] {server.Server.class});
	    $method_randomServer_1 = interfaces.Dispatcher.class.getMethod("randomServer", new java.lang.Class[] {});
	    $method_register_2 = interfaces.Dispatcher.class.getMethod("register", new java.lang.Class[] {server.Server.class});
	    $method_submit_3 = interfaces.Dispatcher.class.getMethod("submit", new java.lang.Class[] {java.util.concurrent.Callable.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public DispatcherImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of close(Server)
    public void close(server.Server $param_Server_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_close_0, new java.lang.Object[] {$param_Server_1}, -7563417115351717883L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of randomServer()
    public server.Server randomServer()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_randomServer_1, null, -4667310883452580033L);
	    return ((server.Server) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of register(Server)
    public void register(server.Server $param_Server_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_register_2, new java.lang.Object[] {$param_Server_1}, 2952901495360429975L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of submit(Callable)
    public interfaces.Job submit(java.util.concurrent.Callable $param_Callable_1)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_submit_3, new java.lang.Object[] {$param_Callable_1}, -355272494584837891L);
	    return ((interfaces.Job) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
